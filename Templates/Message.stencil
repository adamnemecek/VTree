import VTree
{% for enum in types.implementing.AutoMessage %}{% if enum.kind == "enum" %}
extension {{ enum.name }}: Message
{
    public init?(rawValue: RawMessage)
    {
        switch rawValue.funcName {
{% for case in enum.cases %}{% if case.associatedValues.count == 0 %}
            case "{{ case.name }}":
                self = .{{ case.name }}
{% else %}{% if case.associatedValues.count == 1 and case.associatedValues.0.type.implements.MessageContext %}
            // .{{ case.name }}({{ case.associatedValues.0.typeName }})
            case "{{ case.name }}":
                let arguments = rawValue.arguments
                if let context = {{ case.associatedValues.0.typeName }}(rawValue: arguments) {
                    self = .{{ case.name }}(context)
                }
                else {
                    return nil
                }
{% endif %}{% endif %}{% endfor %}
            default:
                return nil
        }
    }

    public var rawValue: RawMessage
    {
        switch self {
{% for case in enum.cases %}{% if case.associatedValues.count == 0 %}
            case .{{ case.name }}:
                return RawMessage(funcName: "{{ case.name }}", arguments: [])
{% else %}{% if case.associatedValues.count == 1 and case.associatedValues.0.type.implements.MessageContext %}
            case let .{{ case.name }}(context):
                return RawMessage(funcName: "{{ case.name }}", arguments: context.rawValue)
{% endif %}{% endif %}{% endfor %}
        }
    }
}
{% endif %}{% endfor %}
